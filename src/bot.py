from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.contrib.middlewares.logging import LoggingMiddleware

import db_worker
from config import BOT_TOKEN, OWM_TOKEN, owm_config
from utils import States
from keyboards import first_weather_now_kb, weather_now_kb

from pyowm import OWM
from pyowm.commons.exceptions import APIResponseError, NotFoundError


bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
dp.middleware.setup(LoggingMiddleware())

owm = OWM(OWM_TOKEN, config=owm_config)
mgr = owm.weather_manager()

MESSAGES = {'start': '–ü—Ä–∏–≤–µ—Ç üëãüèª! –Ø –ø—Ä–æ—Å—Ç–µ–Ω—å–∫–∏–π –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥–Ω—É—é –æ–±—Å—Ç–∞–Ω–æ–≤–∫—É –Ω–∞ —É–ª–∏—Ü–µ. –ò—Å–ø–æ–ª—å–∑—É–π'
                     ' /help –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥',
            'help': '–í–æ—Ç –º–æ–π —Å–∫—Ä–æ–º–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª: \n\n/weather_info - —É–∑–Ω–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ —Å–µ–π—á–∞—Å',
            'city not found': '–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ —Å–Ω–æ–≤–∞',
            'city changed': '–û—Ç–ª–∏—á–Ω–æ! –ì–æ—Ä–æ–¥ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ',
            'response error': '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –í–æ–∑–º–æ–∂–Ω–æ API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ',
            'weather info': '‚òÅ –î–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ —Å–µ–π—á–∞—Å ‚òÅ\n–£ —Ç–µ–±—è –≤—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥ {0}, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?',
            'enter city': '–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:',
            'no city': '‚òÅ –î–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ —Å–µ–π—á–∞—Å ‚òÅ\n–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥',
            'any message': '–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é üòî\n–ò—Å–ø–æ–ª—å–∑—É–π /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥',
            'try again': '–ï—Å–ª–∏ —Å–Ω–æ–≤–∞ –∑–∞—Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /weather_info'
            }


@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    await message.reply(MESSAGES['start'])


@dp.message_handler(commands=['help'])
async def process_help_command(message: types.Message):
    await message.reply(MESSAGES['help'])


@dp.message_handler(commands=['weather_info'])
async def process_weather_info_command(message: types.Message):
    try:
        city = db_worker.get_users_city(message.from_user.id)
        await bot.send_message(message.from_user.id, MESSAGES['weather info'].format(city), reply_markup=weather_now_kb)
    except KeyError:
        await bot.send_message(message.from_user.id, MESSAGES['no city'], reply_markup=first_weather_now_kb)


@dp.callback_query_handler(lambda call: call.data)
async def weather_info_query_handler(callback_query: types.CallbackQuery):
    if callback_query.data == 'weather_now':
        try:
            city = db_worker.get_users_city(callback_query.from_user.id)

            observation = mgr.weather_at_place(city)
            weather = observation.weather

            detailed_status = weather.detailed_status
            temp = f"{weather.temp['temp'] - 273.15:.1f}"
            temp_feels_like = f"{weather.temp['feels_like'] - 273.15:.1f}"
            humidity = weather.humidity
            pressure = f"{weather.pressure['press'] / 1.333:.1f}"

            dirs = ["—Å–µ–≤–µ—Ä–Ω—ã–π", "—Å–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π", "–≤–æ—Å—Ç–æ—á–Ω—ã–π", "—é–≥–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π",
                    "—é–∂–Ω—ã–π", "—é–≥–æ-–∑–∞–ø–∞–¥–Ω—ã–π", "—é–∂–Ω—ã–π", "—Å–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥–Ω—ã–π"]
            wind_dir = dirs[round(weather.wnd['deg'] / 45) % 8]
            wind_speed = f"{weather.wnd['speed']:.1f}"

            weather_message = f'–°–µ–π—á–∞—Å –≤ –≥–æ—Ä–æ–¥–µ {city} {detailed_status}\n' \
                      f'–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ {temp}‚ÑÉ, –æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {temp_feels_like}‚ÑÉ\n' \
                      f'–í–ª–∞–∂–Ω–æ—Å—Ç—å {humidity}%, –¥–∞–≤–ª–µ–Ω–∏–µ {pressure} –º–º. —Ä—Ç. —Å—Ç.\n' \
                      f'–í–µ—Ç–µ—Ä {wind_dir}, —Å–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ {wind_speed} –º/—Å'

            await bot.edit_message_text(chat_id=callback_query.message.chat.id,
                                        message_id=callback_query.message.message_id,
                                        text='‚òÅ –î–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ —Å–µ–π—á–∞—Å ‚òÅ')
            await bot.send_message(callback_query.from_user.id, weather_message)
            await bot.send_message(callback_query.from_user.id, MESSAGES['try again'])
        except APIResponseError:
            await bot.send_message(callback_query.from_user.id, MESSAGES['response error'])

    elif callback_query.data == 'change_city':
        await bot.edit_message_text(chat_id=callback_query.message.chat.id,
                                    message_id=callback_query.message.message_id,
                                    text='–°–º–µ–Ω–∞ –≥–æ—Ä–æ–¥–∞ üè¢')
        await States.enter_city_name.set()
        await bot.send_message(callback_query.from_user.id, MESSAGES['enter city'])


@dp.message_handler(state=States.enter_city_name)
async def entry_city(message: types.Message, state: FSMContext):
    city = message.text.title()
    try:
        mgr.weather_at_place(city)

        db_worker.change_users_city(message.from_user.id, city)

        await state.finish()
        await message.reply(MESSAGES['city changed'] + city)
        await bot.send_message(message.from_user.id, MESSAGES['weather info'].format(city), reply_markup=weather_now_kb)
    except NotFoundError:
        await message.reply(MESSAGES['city not found'])
    except APIResponseError:
        await message.reply(MESSAGES['response error'])


@dp.message_handler()
async def entry_city(message: types.Message):
    await bot.send_video(message.from_user.id, 'https://vk.com/doc88969835_596353553?hash=94a78fbc18d2f4cfe2&dl=fd0ac04724ee744d50&wnd=1&module=im&mp4=1')
    await bot.send_message(message.from_user.id, MESSAGES['any message'])


async def shutdown(dp: Dispatcher):
    await dp.storage.close()
    await dp.storage.wait_closed()


if __name__ == "__main__":
    executor.start_polling(dp, on_shutdown=shutdown)
